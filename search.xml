<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>仿vue-cli搭建自己的cli</title>
      <link href="/2019/10/17/cli/"/>
      <url>/2019/10/17/cli/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h3><p>这是用来编写指令和处理命令行的，具体用法如下：</p><pre><code>const program = require(&quot;commander&quot;);// 定义指令program.version(&apos;0.0.1&apos;).command(&apos;init&apos;, &apos;Generate a new project from a template&apos;).action(() =&gt; {// 回调函数})// 解析命令行参数program.parse(process.argv);</code></pre><a id="more"></a><h3 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h3><p>这是个强大的交互式命令行工具，具体用法如下：</p><pre><code>const inquirer = require(&apos;inquirer&apos;);inquirer.prompt([    // 一些交互式的问题]).then(answers =&gt; {    // 回调函数，answers 就是用户输入的内容，是个对象});</code></pre><h3 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h3><p>这是用来修改控制台输出内容样式的，比如颜色啊，具体用法如下：</p><pre><code>const chalk = require(&apos;chalk&apos;);console.log(chalk.green(&apos;success&apos;));console.log(chalk.red(&apos;error&apos;));</code></pre><h3 id="ora"><a href="#ora" class="headerlink" title="ora"></a>ora</h3><p>这是一个好看的加载，就是你下载的时候会有个转圈圈的那种效果，用法如下：</p><pre><code>const ora = require(&apos;ora&apos;)let spinner = ora(&apos;downloading template ...&apos;)spinner.start()</code></pre><h3 id="download-git-repo"><a href="#download-git-repo" class="headerlink" title="download-git-repo"></a>download-git-repo</h3><p>看名字很明显了，这是用来下载远程模板的，支持 GitHub、 GitLab 和 Bitbucket 等，用法如下</p><pre><code>const download = require(&apos;download-git-repo&apos;)download(repository, destination, options, callback)</code></pre><p>其中 repository 是远程仓库地址；destination 是存放下载的文件路径，也可以直接写文件名，默认就是当前目录；options 是一些选项，比如 { clone：boolean } 表示用 http download 还是 git clone 的形式下载。</p><h2 id="目录搭建"><a href="#目录搭建" class="headerlink" title="目录搭建"></a>目录搭建</h2><p>1.首先我们要创建一个文件夹，并取名叫 xr-cli；<br>2.在该目录下执行 npm init 命令（你应该有安装 node 吧😂），一路回车，就会生成一个生成 package.json 文件，在 package.json 里面写入以下依赖并执行 npm install 安装，如下：</p><pre><code>&quot;dependencies&quot;: {    &quot;chalk&quot;: &quot;^2.4.2&quot;,    &quot;commander&quot;: &quot;^2.19.0&quot;,    &quot;download-git-repo&quot;: &quot;^1.1.0&quot;,    &quot;inquirer&quot;: &quot;^6.2.2&quot;,    &quot;ora&quot;: &quot;^3.2.0&quot;}</code></pre><p>3.新建一个 bin 文件夹，并在 bin 目录下新建一个无后缀名的 xr 文件，并写上</p><pre><code>#!/usr/bin/env nodeconsole.log(&apos;hello&apos;);</code></pre><p>这个文件就是我们整个脚手架的入口文件，我们用 node ./bin/xr 运行一下，就能在控制台打印出 hello，如下图：</p><p><img alt="logo" data-src="project.png"></p><p>这里要注意开头的 #!/usr/bin/env node 这个语句必须加上，主要是为了让系统看到这一行的时候，会沿着该路径去查找 node 并执行，主要是为了兼容 Mac ，确保可执行</p><p>当前，bin 目录下就只有一个文件，就是入口文件 xr。所以现在我们先来编写这个文件，由于内容较少，我们直接看代码：</p><pre><code>#!/usr/bin/env nodeconst program = require(&apos;commander&apos;)// 定义当前版本// 定义使用方法// 定义四个指令program.version(require(&apos;../package&apos;).version).usage(&apos;&lt;command&gt; [options]&apos;).command(&apos;add&apos;, &apos;add a new template&apos;).command(&apos;delete&apos;, &apos;delete a template&apos;).command(&apos;list&apos;, &apos;list all the templates&apos;).command(&apos;init&apos;, &apos;generate a new project from a template&apos;)// 解析命令行参数program.parse(process.argv)</code></pre><p>这个文件的主要作用就是定义指令，现在我们用 node ./bin/xr 运行一下，就能看到如下结果<br><img alt="logo" data-src="xr.png"></p><p>当然，你可能会觉得每次输入 node ./bin/xr 这个命令有点麻烦，没关系，我们可以在 package.json 里面写入已下内容：</p><pre><code>// bin 用来指定每个命令所对应的可执行文件的位置&quot;bin&quot;: {    &quot;xr&quot;: &quot;bin/xr&quot;}</code></pre><p>然后在根目录下执行 npm link（就是把命令挂载到全局的意思），这样我们每次只要输入 xr，就可以直接运行了，so cool，就像下面这样<br><img alt="logo" data-src="link.png"></p><p>是不是好像有点样子了呢😁😁😁，那就让我们继续完善下 bin 目录吧！ok，让我们在 bin 目录下再新建四个文件，分别对应上面的四个指令，然后分别处理四个指令要做的事情，如下图:<br><img alt="logo" data-src="command.png"></p><p>同样的，我们修改一下 package.json 里面的 bin 内容，如下：</p><pre><code>&quot;bin&quot;: {    &quot;xr&quot;: &quot;bin/xr&quot;,    &quot;xr-add&quot;: &quot;bin/xr-add&quot;,    &quot;xr-delete&quot;: &quot;bin/xr-delete&quot;,    &quot;xr-list&quot;: &quot;bin/xr-list&quot;,    &quot;xr-init&quot;: &quot;bin/xr-init&quot;}</code></pre><p>然后执行 npm unlink 解绑全局命令，再执行 npm link 重新把命令绑定到全局，就像下面这样：<br><img alt="logo" data-src="senga-link.png"></p><p>最后顺便在根目录下新建一个 template.json 文件，里面的内容就是一个 {}。</p><h2 id="编写指令"><a href="#编写指令" class="headerlink" title="编写指令"></a>编写指令</h2><p>好了，一切准备就绪，接下来就让我们来写下具体的四个指令吧。</p><h3 id="xr-add"><a href="#xr-add" class="headerlink" title="xr-add"></a>xr-add</h3><p>这个内容也是比较少，直接看代码：</p><pre><code>#!/usr/bin/env node// 交互式命令行const inquirer = require(&apos;inquirer&apos;)// 修改控制台字符串的样式const chalk = require(&apos;chalk&apos;)// node 内置文件模块const fs = require(&apos;fs&apos;)// 读取根目录下的 template.jsonconst tplObj = require(`${__dirname}/../template`)// 自定义交互式命令行的问题及简单的校验let question = [{    name: &quot;name&quot;,    type: &apos;input&apos;,    message: &quot;请输入模板名称&quot;,    validate (val) {    if (val === &apos;&apos;) {        return &apos;Name is required!&apos;    } else if (tplObj[val]) {        return &apos;Template has already existed!&apos;    } else {        return true    }    }},{    name: &quot;url&quot;,    type: &apos;input&apos;,    message: &quot;请输入模板地址&quot;,    validate (val) {    if (val === &apos;&apos;) return &apos;The url is required!&apos;    return true    }}]inquirer.prompt(question).then(answers =&gt; {    // answers 就是用户输入的内容，是个对象    let { name, url } = answers;    // 过滤 unicode 字符    tplObj[name] = url.replace(/[\u0000-\u0019]/g, &apos;&apos;)    // 把模板信息写入 template.json 文件中    fs.writeFile(`${__dirname}/../template.json`, JSON.stringify(tplObj), &apos;utf-8&apos;, err =&gt; {    if (err) console.log(err)    console.log(&apos;\n&apos;)    console.log(chalk.green(&apos;Added successfully!\n&apos;))    console.log(chalk.grey(&apos;The latest template list is: \n&apos;))    console.log(tplObj)    console.log(&apos;\n&apos;)    })})</code></pre><p>这个文件主要目的就是添加模板并存储起来，上面的注释应该都写的挺清楚了。我们执行 xr add 来看看效果<br><img alt="logo" data-src="add.png"></p><p>这里的模板名称（自己随便取）相当于 vue init webpack project-name 当中的 webpack；模板地址要注意一下，像下面这样写就可以，这里以 github 为例：</p><p><img alt="logo" data-src="add-pic.png"><br>这里补充一下 xr add 怎么对应到 xr-add 的：我们前面在定义 program.command(‘add’).action(() =&gt; {}) 的时候没有写 action 这个回调函数，而当我们执行 xr add 的时候，commander 会尝试在入口脚本的目录中搜索可执行文件，找到形如 program-command（这里就是 xr-add）的命令来执行，大概是这么个意思，下面的命令也是一样的道理。</p><h3 id="xr-delete"><a href="#xr-delete" class="headerlink" title="xr-delete"></a>xr-delete</h3><p>如果你理解了上面的那个步骤，这步对你来说应该也是洒洒水啦！上代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> tplObj = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../template`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> question = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"name"</span>,</span><br><span class="line">    message: <span class="string">"请输入要删除的模板名称"</span>,</span><br><span class="line">    validate (val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Name is required!'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!tplObj[val]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Template does not exist!'</span></span><br><span class="line">      &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inquirer</span><br><span class="line">  .prompt(question).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; name &#125; = answers;</span><br><span class="line">    <span class="keyword">delete</span> tplObj[name]</span><br><span class="line">    <span class="comment">// 更新 template.json 文件</span></span><br><span class="line">    fs.writeFile(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../template.json`</span>, <span class="built_in">JSON</span>.stringify(tplObj), <span class="string">'utf-8'</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.green(<span class="string">'Deleted successfully!\n'</span>))</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.grey(<span class="string">'The latest template list is: \n'</span>))</span><br><span class="line">      <span class="built_in">console</span>.log(tplObj)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>应该很好理解，就不过多解释了，我们直接执行 xr delete 看下效果：<br><img alt="logo" data-src="delete-pic.png"></p><h3 id="xr-list"><a href="#xr-list" class="headerlink" title="xr-list"></a>xr-list</h3><p>这个更简单了，两行代码搞定：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tplObj = require(<span class="string">`$&#123;__dirname&#125;/../template`</span>)</span><br><span class="line">console.log(tplObj)</span><br></pre></td></tr></table></figure><p>是不是简单到爆💥。我们执行 xr list 看看效果：<br><img alt="logo" data-src="list-pic.png"><br>因为刚才一添加一删除，所以目前没有模板，就输出 {}。</p><h3 id="xr-init"><a href="#xr-init" class="headerlink" title="xr-init"></a>xr-init</h3><p>这应该是最主要（但不难）的一步了，毕竟我们写到现在还没有通过命令初始化过一个项目呢😭。所以这步的重点就是执行 download 方法，并传入相应参数，具体看代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>)</span><br><span class="line"><span class="keyword">const</span> tplObj = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../template`</span>)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .usage(<span class="string">'&lt;template-name&gt; [project-name]'</span>)</span><br><span class="line">program.parse(process.argv)</span><br><span class="line"><span class="comment">// 当没有输入参数的时候给个提示</span></span><br><span class="line"><span class="keyword">if</span> (program.args.length &lt; <span class="number">1</span>) <span class="keyword">return</span> program.help()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好比 vue init webpack project-name 的命令一样，第一个参数是 webpack，第二个参数是 project-name</span></span><br><span class="line"><span class="keyword">let</span> templateName = program.args[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> projectName = program.args[<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 小小校验一下参数</span></span><br><span class="line"><span class="keyword">if</span> (!tplObj[templateName]) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.red(<span class="string">'\n Template does not exit! \n '</span>))</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!projectName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.red(<span class="string">'\n Project should not be empty! \n '</span>))</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = tplObj[templateName]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.white(<span class="string">'\n Start generating... \n'</span>))</span><br><span class="line"><span class="comment">// 出现加载图标</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">"Downloading..."</span>);</span><br><span class="line">spinner.start();</span><br><span class="line"><span class="comment">// 执行下载方法并传入参数</span></span><br><span class="line">download (</span><br><span class="line">  url,</span><br><span class="line">  projectName,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      spinner.fail();</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">`Generation failed. <span class="subst">$&#123;err&#125;</span>`</span>))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束加载图标</span></span><br><span class="line">    spinner.succeed();</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">'\n Generation completed!'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\n To get started'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`\n    cd <span class="subst">$&#123;projectName&#125;</span> \n`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>ok，我们执行一下 xr init simple test，记得先执行一下 xr add：</p><p><img alt="logo" data-src="init-pic.png"></p><p>现在我们就可以在左侧的目录中看到 test 项目了，如下图：<br><img alt="logo" data-src="directory.png"><br>至此，一个小小的脚手架就做完了。🌹🌹🌹此处应该有鲜花和掌声👏👏👏</p><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p>既然以上命令都执行成功了，那接下来我们就把它发布到 npm 上吧（写都写了，不能浪费😬）。</p><p>删除 test 文件夹，它就本地测试用的，用完就抛弃它（当然做人不能这样）<br>在根目录下新建 README.md 文件，随便写点使用说明，假装正经一下<br>在根目录下新建 .npmignore 文件，并写入     /node_modules，意思就是发布的时候忽略 node_modules 文件夹，<br>去 npm 官网注册个账号（很简单的），同时搜索一下 xr-cli 这个名字，看看有没有人用，有的话就换一个罗</p><p><img alt="logo" data-src="npm.png"></p><p>现在让我们回到项目根目录，执行 npm login 登入 npm 账号，再执行 npm publish 发布，就像下面这样：<br><img alt="logo" data-src="npm-login.png"><br>没错，就是这样两个简单的命令，我们就发布成功啦，真是可喜可贺🍺🍺🍺。大概过一分钟左右（反正挺快的），我们再去 npm 官网搜下 xr-cli，就可以看到自己的脚手架啦，哈哈哈哈，贼开心👍👍👍。<br><img alt="logo" data-src="npm-publish.png"><br>这里补充说明一点：根据规范，只有在发包的24小时内才允许撤销发布的包，所以为了不污染 npm 网站，如果只是测试的话就执行 npm unpublish –force 删除吧，毕竟我们都是有素质的人。<br>别急，还没有结束🙅‍♀️。发都发出去了，怎么也得验证一波撒。嗯，说的有道理，无法反驳，那就赶紧验收吧！这里我们记得先用 npm unlink 解绑一下命令，不然会相互影响。下面我们打开终端，输入 npm i xr-cli -g 全局安装一下脚手架，然后执行 xr，如果出现下图中的模样就说明已经安装成功了。</p><p><img alt="logo" data-src="cli-install.png"></p><p>接下来进入到桌面，执行 xr init simple xr-test，不一会就可以在桌面上看到自己的项目啦。</p><p><img alt="logo" data-src="result.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的操作只要你熟悉了几遍之后，再去看看 vue-cli 的源码结构，你就会有种拨开云雾见月明的感觉（它只是比我们这个脚手架完善很多很多很多而已😭😭😭）。<br>当然了，这只是渣渣版本。你可以往里面添加更多的东西，比如自动化构建和动态模板啊（其实动态模板是个大头），然后尝试写下更多更好的交互和功能，这样你就也能拥有一个属于自己的脚手架啦，心动不如行动，还等什么呢，不要998，只要有键盘，赶紧敲吧同志们，Let’s go！🌈</p><h2 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h2><p>在填写模版的url时，不是填https://之类的地址，填的是git的项目名称/仓库名称，例如：lingdongyuanjia/test-cli</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>掘金：<a href="https://juejin.im/post/5c94fef7f265da60fd0c15e8" target="_blank" rel="noopener">https://juejin.im/post/5c94fef7f265da60fd0c15e8</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大前端架构的学习</title>
      <link href="/2019/09/18/BFF/"/>
      <url>/2019/09/18/BFF/</url>
      
        <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>简书:<a href="https://www.jianshu.com/p/bb8ac7db7e2d" target="_blank" rel="noopener">https://www.jianshu.com/p/bb8ac7db7e2d</a></p><p>前后端分离演进:<br><a href="https://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&amp;mid=2652975733&amp;idx=1&amp;sn=29eb692ac172eac6d44a98837e97b52d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&amp;mid=2652975733&amp;idx=1&amp;sn=29eb692ac172eac6d44a98837e97b52d&amp;scene=21#wechat_redirect</a></p><a id="more"></a><p>蚂蚁财富的BFF实践:<a href="https://os.alipayobjects.com/rmsportal/WtUmBLJSmqtDHkvJzuzM.pdf" target="_blank" rel="noopener">https://os.alipayobjects.com/rmsportal/WtUmBLJSmqtDHkvJzuzM.pdf</a></p><p>了解BFF架构:<a href="https://segmentfault.com/a/1190000009558309" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009558309</a></p><p>博客园:<a href="https://kb.cnblogs.com/page/564701/" target="_blank" rel="noopener">https://kb.cnblogs.com/page/564701/</a></p><p>饿了么大前端解密:<a href="https://36kr.com/p/5066833" target="_blank" rel="noopener">https://36kr.com/p/5066833</a></p><p>大搜车:<a href="http://f2e.souche.com/blog/da-qian-duan-wo-de-li-jie/" target="_blank" rel="noopener">http://f2e.souche.com/blog/da-qian-duan-wo-de-li-jie/</a></p><p>漫极客:<a href="https://www.infoq.cn/article/web-desktop-mobile-frontend-develop/" target="_blank" rel="noopener">https://www.infoq.cn/article/web-desktop-mobile-frontend-develop/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub和Hexo搭建自己的博客</title>
      <link href="/2019/09/12/blog/"/>
      <url>/2019/09/12/blog/</url>
      
        <content type="html"><![CDATA[<p>​    最近打算看一些框架的源码，但是在正式看之前，突然觉得缺少一个保存和记录的平台，虽然平时也会在掘金、有道云写一些收获，但是觉得还是有点太分散了，所以，想了想，还是自己搞个博客好了。</p><p>​    说干就干，在网上搜了一波，发现可以借用github和hexo搭建自己的博客，以下是搭建时的一些操作。主要参照了掘金上的一篇文章，文末会给大家推荐一下，该文章写的很详细，良心之作。</p><a id="more"></a><h3 id="github准备"><a href="#github准备" class="headerlink" title="github准备"></a>github准备</h3><p>1.打开github:<a href="https://github.com/,注册账号" target="_blank" rel="noopener">https://github.com/,注册账号</a><br>2.创建blog的仓库,如图所示：<br><img alt data-src="github.png"><br>3.新建一个文件,测试能够访问成功<br><img alt data-src="test_git.png"><br>4.打开浏览器访问github page:<a href="https://lingdongyuanjia.github.io/" target="_blank" rel="noopener">https://lingdongyuanjia.github.io/</a></p><h3 id="hexo博客本地环境安装"><a href="#hexo博客本地环境安装" class="headerlink" title="hexo博客本地环境安装"></a>hexo博客本地环境安装</h3><p>1.安装node<br>2.安装git<br>3.全局安装hexo: npm install -g hexo-cli<br>4.初始化hexo目录:hexo init test_blog<br>5.进入目录: cd blog<br>6.安装依赖:npm install<br>7.清除浏览器缓存:hexo clean<br>8.生成静态页面:hexo g<br>9.本地运行:hexo s,端口号默认是4000，如果端口号被占用，可以使用:hexo s –port 6666 切换端口<br>10.浏览器中打开(localhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行,如图所示：<br><img alt data-src="hexo.png"></p><h3 id="本地博客发布到github"><a href="#本地博客发布到github" class="headerlink" title="本地博客发布到github"></a>本地博客发布到github</h3><p>1.安装将hexo部署到git的插件,在test_blog目录下安装插件:npm install hexo-deployer-git –save<br>2.将本地目录与github关联起来<br>ssh-keygen -t rsa -C “你的git邮箱地址”<br>3.打开.ssh文件夹，将id_rsa.pub拷贝到git下的Setting -&gt; SSH and GPG keys下<br>4.添加New SSH key将之前复制的内容粘贴到key的框里，任意title,完成添加<br><img alt data-src="ssh.png"><br>5.进入test_blog目录下，找到_config.yml博客的配置文件,更改url和deploy下的repo<br><img alt data-src="config.png"><br>6.保存配置，将本地页面上传至:hexo g -d</p><h3 id="修改hexo主题及其他配置"><a href="#修改hexo主题及其他配置" class="headerlink" title="修改hexo主题及其他配置"></a>修改hexo主题及其他配置</h3><p>1._config.yml是博客的配置文件;themes/主题名/_config.yml是主题配置文件<br>2.hexo选题选择：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>3.选择某一主题后，拷贝该主题的的git地址；进入test_blog的theme目录下，安装主题:git clone <a href="https://github.com/klugjo/hexo-theme-clean-blog.git" target="_blank" rel="noopener">https://github.com/klugjo/hexo-theme-clean-blog.git</a><br>4.安装完后，进入博客的配置文件，即test_blog/_config.yml，将theme改为该主题名，清除缓存重新启动<br>5.如需要更改主题内容，进入themes/hexo-theme-next/_config.yml进行修改</p><h3 id="编写markdown文章"><a href="#编写markdown文章" class="headerlink" title="编写markdown文章"></a>编写markdown文章</h3><p>1.创建文章<br>hexo new “文章标题”:此时会在source/_post文件夹中创建一个文件，该文件就是要发布的原始文件<br>2.模版设置<br>当我们使用命令 hexo new “title” 去创建我们的文章时，hexo会根据/scaffolds/post.md文件对新建文件进行初始化，换言之，/scaffolds/post.md文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯</p><h4 id="插入图片的操作"><a href="#插入图片的操作" class="headerlink" title="插入图片的操作"></a>插入图片的操作</h4><pre><code>1.根目录的_config.yml 里的post_asset_folder:这个选项设置为true;2.安装插件:npm install https://github.com/CodeFalling/hexo-asset-image --save;3.完成安装后用hexo新建文章 hexo new &quot;blog&quot; 的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。4.只要使用![logo](logo.jpg)就可以插入图片。其中[]里面不写文字则没有图片标题。</code></pre><h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><p>1.在添加图片时，在.md的文件中习惯性空2格，其他也就是相当于在code中插入内容了，这样无论如何也显示不出来，所以各位老铁在插入图片时，要注意</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>参考文章：<a href="https://juejin.im/post/5caddd1ff265da035e210dce#heading-67" target="_blank" rel="noopener">https://juejin.im/post/5caddd1ff265da035e210dce#heading-67</a><br>hexo主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>next文档：<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
